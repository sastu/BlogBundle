<?php

namespace Core\Bundle\BlogBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CustomerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository
{
    
    /**
     * Count the total of rows
     *
     * @return int
     */
    public function countTotal()
    {
        $qb = $this->getQueryBuilder()
            ->select('COUNT(p)');

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Find all rows filtered for DataTables
     *
     * @param string $search        The search string
     * @param int    $sortColumn    The column to sort by
     * @param string $sortDirection The direction to sort the column
     *
     * @return \Doctrine\ORM\Query
     */
    public function findPost($search)
    {
        // select
        $qb = $this->getQueryBuilder()
            ->select('p')
            ;    

        // search
        if (!empty($search)) {
            $qb->where('p.title LIKE :search')
                ->orWhere('p.description LIKE :search')
                ->setParameter('search', '%'.$search.'%');
        }

        $qb->orderBy('p.created', 'ASC');

        return $qb->getQuery()->getResult();
    }
    
    /**
     * Find all rows filtered for DataTables
     *
     * @param string $search        The search string
     * @param int    $sortColumn    The column to sort by
     * @param string $sortDirection The direction to sort the column
     *
     * @return \Doctrine\ORM\Query
     */
    public function findAllForDataTables($search, $sortColumn, $sortDirection)
    {
        // select
        $qb = $this->getQueryBuilder()
            ->select('p.id, p.title')
            ;    

        // join
        //$qb->leftJoin('p.project', 'pp');
        //$qb->where('p.project is NULL');
        
        // search
        if (!empty($search)) {
            $qb->andWhere('p.title LIKE :search')
                ->setParameter('search', '%'.$search.'%');
        }

        // sort by column
        switch($sortColumn) {
            case 0:
                $qb->orderBy('p.id', $sortDirection);
                break;
            case 1:
                $qb->orderBy('p.title', $sortDirection);
                break;
 
        }

        return $qb->getQuery();
    }

    /**
     * Find all rows filtered for DataTables
     *
     * @param string $search        The search string
     * @param int    $sortColumn    The column to sort by
     * @param string $sortDirection The direction to sort the column
     *
     * @return \Doctrine\ORM\Query
     */
    public function findAllForDataTablesByProjects($search, $sortColumn, $sortDirection, $projectIds)
    {
        // select
        $qb = $this->getQueryBuilder()
            ->select('p.id, p.title, p.createdAt, pp.id projectId, pp.name projectName')
            ;   

        // join
        $qb->join('p.project', 'pp');

        // search
        if (!empty($search)) {
            $qb->where('p.id IS NOT NULL ')
                ->andWhere('p.title LIKE :search OR projectName LIKE :search')
                ->andWhere('pp.id IN(:projectIds)')
                ->setParameter('search', '%'.$search.'%');
        }else{
            $qb->where('pp.id IN(:projectIds)');
        }
        
        $qb->setParameter('projectIds', array_values($projectIds));
        
        // sort by column
        switch($sortColumn) {
            case 0:
                $qb->orderBy('p.id', $sortDirection);
                break;
            case 1:
                $qb->orderBy('p.title', $sortDirection);
                break;
            case 2:
                $qb->orderBy('projectName', $sortDirection);
                break;
 
        }
        
        if($sortColumn==''){
            $qb->orderBy('p.createdAt', 'DESC');
        }

        return $qb->getQuery();
    }
    
    
    private function getQueryBuilder()
    {
        $em = $this->getEntityManager();

        $qb = $em->getRepository('BlogBundle:Post')
            ->createQueryBuilder('p');

        return $qb;
    }
}
